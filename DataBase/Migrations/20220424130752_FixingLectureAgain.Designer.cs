// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBase.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20220424130752_FixingLectureAgain")]
    partial class FixingLectureAgain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataBase.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DataBase.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("DataBase.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LectureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LectureId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DepartmentLecture", b =>
                {
                    b.Property<Guid>("DepartmentListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LectureListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentListId", "LectureListId");

                    b.HasIndex("LectureListId");

                    b.ToTable("DepartmentLecture");
                });

            modelBuilder.Entity("DataBase.Lecture", b =>
                {
                    b.HasOne("DataBase.Student", "Student")
                        .WithMany("LectureList")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataBase.Student", b =>
                {
                    b.HasOne("DataBase.Department", "Department")
                        .WithMany("StudentList")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId");

                    b.Navigation("Department");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("DepartmentLecture", b =>
                {
                    b.HasOne("DataBase.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Lecture", null)
                        .WithMany()
                        .HasForeignKey("LectureListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Department", b =>
                {
                    b.Navigation("StudentList");
                });

            modelBuilder.Entity("DataBase.Student", b =>
                {
                    b.Navigation("LectureList");
                });
#pragma warning restore 612, 618
        }
    }
}
